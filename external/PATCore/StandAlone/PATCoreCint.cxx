//
// File generated by /opt/ROOT/v5-34-00-patches/bin/rootcint at Thu Oct 31 14:59:55 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIStandAlonedIPATCoreCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "PATCoreCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      namespace Root {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Root::TAccept TAccept;
      #else
      class TAccept  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~TAccept() throw() {};
          char* m_name; //
         ::bitset< 32 > m_accept; //
         map< const ::TString, pair< ::TString, unsigned int >  > m_cutMap; //
         ::TString m_emptyString; //
      };
      #endif
      } 
      namespace Root {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Root::TResult TResult;
      #else
      class TResult  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~TResult() throw() {};
          char* m_name; //
         double m_defaultResult; //
         vector< double > m_result; //
         map< const ::TString, pair< ::TString, unsigned int >  > m_resultMap; //
         ::TString m_emptyString; //
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace Root {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Root_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Root", 0 /*version*/, "./../PATCore/TResult.h", 22,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Root_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Root_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void RootcLcLTAccept_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RootcLcLTAccept_Dictionary();
   static void *new_RootcLcLTAccept(void *p = 0);
   static void *newArray_RootcLcLTAccept(Long_t size, void *p);
   static void delete_RootcLcLTAccept(void *p);
   static void deleteArray_RootcLcLTAccept(void *p);
   static void destruct_RootcLcLTAccept(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TAccept*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Root::TAccept) == sizeof(::ROOT::Shadow::Root::TAccept));
      ::Root::TAccept *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Root::TAccept),0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TAccept", "./../PATCore/TAccept.h", 27,
                  typeid(::Root::TAccept), DefineBehavior(ptr, ptr),
                  &RootcLcLTAccept_ShowMembers, &RootcLcLTAccept_Dictionary, isa_proxy, 4,
                  sizeof(::Root::TAccept) );
      instance.SetNew(&new_RootcLcLTAccept);
      instance.SetNewArray(&newArray_RootcLcLTAccept);
      instance.SetDelete(&delete_RootcLcLTAccept);
      instance.SetDeleteArray(&deleteArray_RootcLcLTAccept);
      instance.SetDestructor(&destruct_RootcLcLTAccept);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TAccept*)
   {
      return GenerateInitInstanceLocal((::Root::TAccept*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TAccept*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RootcLcLTAccept_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Root::TAccept*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RootcLcLTResult_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RootcLcLTResult_Dictionary();
   static void *new_RootcLcLTResult(void *p = 0);
   static void *newArray_RootcLcLTResult(Long_t size, void *p);
   static void delete_RootcLcLTResult(void *p);
   static void deleteArray_RootcLcLTResult(void *p);
   static void destruct_RootcLcLTResult(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TResult*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Root::TResult) == sizeof(::ROOT::Shadow::Root::TResult));
      ::Root::TResult *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Root::TResult),0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TResult", "./../PATCore/TResult.h", 24,
                  typeid(::Root::TResult), DefineBehavior(ptr, ptr),
                  &RootcLcLTResult_ShowMembers, &RootcLcLTResult_Dictionary, isa_proxy, 4,
                  sizeof(::Root::TResult) );
      instance.SetNew(&new_RootcLcLTResult);
      instance.SetNewArray(&newArray_RootcLcLTResult);
      instance.SetDelete(&delete_RootcLcLTResult);
      instance.SetDeleteArray(&deleteArray_RootcLcLTResult);
      instance.SetDestructor(&destruct_RootcLcLTResult);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TResult*)
   {
      return GenerateInitInstanceLocal((::Root::TResult*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TResult*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RootcLcLTResult_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Root::TResult*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void RootcLcLTAccept_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Root::TAccept.
      typedef ::ROOT::Shadow::Root::TAccept ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Root::TAccept*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_name", &sobj->m_name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_accept", (void*)&sobj->m_accept);
      R__insp.InspectMember("bitset<m_nBits>", (void*)&sobj->m_accept, "m_accept.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cutMap", (void*)&sobj->m_cutMap);
      R__insp.InspectMember("map<const TString,std::pair<TString,unsigned int> >", (void*)&sobj->m_cutMap, "m_cutMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_emptyString", &sobj->m_emptyString);
      R__insp.InspectMember(sobj->m_emptyString, "m_emptyString.");
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTAccept(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Root::TAccept : new ::Root::TAccept;
   }
   static void *newArray_RootcLcLTAccept(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Root::TAccept[nElements] : new ::Root::TAccept[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTAccept(void *p) {
      delete ((::Root::TAccept*)p);
   }
   static void deleteArray_RootcLcLTAccept(void *p) {
      delete [] ((::Root::TAccept*)p);
   }
   static void destruct_RootcLcLTAccept(void *p) {
      typedef ::Root::TAccept current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TAccept

//______________________________________________________________________________
namespace ROOT {
   void RootcLcLTResult_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Root::TResult.
      typedef ::ROOT::Shadow::Root::TResult ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Root::TResult*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_name", &sobj->m_name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_defaultResult", &sobj->m_defaultResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_result", (void*)&sobj->m_result);
      R__insp.InspectMember("vector<double>", (void*)&sobj->m_result, "m_result.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_resultMap", (void*)&sobj->m_resultMap);
      R__insp.InspectMember("map<const TString,std::pair<TString,unsigned int> >", (void*)&sobj->m_resultMap, "m_resultMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_emptyString", &sobj->m_emptyString);
      R__insp.InspectMember(sobj->m_emptyString, "m_emptyString.");
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTResult(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Root::TResult : new ::Root::TResult;
   }
   static void *newArray_RootcLcLTResult(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Root::TResult[nElements] : new ::Root::TResult[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTResult(void *p) {
      delete ((::Root::TResult*)p);
   }
   static void deleteArray_RootcLcLTResult(void *p) {
      delete [] ((::Root::TResult*)p);
   }
   static void destruct_RootcLcLTResult(void *p) {
      typedef ::Root::TResult current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TResult

namespace ROOT {
   void bitsetlE32gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void bitsetlE32gR_Dictionary();
   static void *new_bitsetlE32gR(void *p = 0);
   static void *newArray_bitsetlE32gR(Long_t size, void *p);
   static void delete_bitsetlE32gR(void *p);
   static void deleteArray_bitsetlE32gR(void *p);
   static void destruct_bitsetlE32gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const bitset<32>*)
   {
      bitset<32> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(bitset<32>),0);
      static ::ROOT::TGenericClassInfo 
         instance("bitset<32>", 2, "/opt/ROOT/v5-34-00-patches/cint/cint/lib/prec_stl/bitset", 20,
                  typeid(bitset<32>), DefineBehavior(ptr, ptr),
                  0, &bitsetlE32gR_Dictionary, isa_proxy, 0,
                  sizeof(bitset<32>) );
      instance.SetNew(&new_bitsetlE32gR);
      instance.SetNewArray(&newArray_bitsetlE32gR);
      instance.SetDelete(&delete_bitsetlE32gR);
      instance.SetDeleteArray(&deleteArray_bitsetlE32gR);
      instance.SetDestructor(&destruct_bitsetlE32gR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback<TStdBitsetHelper< bitset<32> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const bitset<32>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void bitsetlE32gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const bitset<32>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_bitsetlE32gR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) bitset<32> : new bitset<32>;
   }
   static void *newArray_bitsetlE32gR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) bitset<32>[nElements] : new bitset<32>[nElements];
   }
   // Wrapper around operator delete
   static void delete_bitsetlE32gR(void *p) {
      delete ((bitset<32>*)p);
   }
   static void deleteArray_bitsetlE32gR(void *p) {
      delete [] ((bitset<32>*)p);
   }
   static void destruct_bitsetlE32gR(void *p) {
      typedef bitset<32> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class bitset<32>

namespace ROOT {
   void maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR_Dictionary();
   static void *new_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p = 0);
   static void *newArray_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(Long_t size, void *p);
   static void delete_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p);
   static void deleteArray_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p);
   static void destruct_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<const TString,pair<TString,unsigned int> >*)
   {
      map<const TString,pair<TString,unsigned int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<const TString,pair<TString,unsigned int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<const TString,pair<TString,unsigned int> >", -2, "/opt/ROOT/v5-34-00-patches/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<const TString,pair<TString,unsigned int> >), DefineBehavior(ptr, ptr),
                  0, &maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<const TString,pair<TString,unsigned int> >) );
      instance.SetNew(&new_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR);
      instance.SetNewArray(&newArray_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR);
      instance.SetDelete(&delete_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR);
      instance.SetDestructor(&destruct_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<const TString,pair<TString,unsigned int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<const TString,pair<TString,unsigned int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<const TString,pair<TString,unsigned int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<const TString,pair<TString,unsigned int> > : new map<const TString,pair<TString,unsigned int> >;
   }
   static void *newArray_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<const TString,pair<TString,unsigned int> >[nElements] : new map<const TString,pair<TString,unsigned int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p) {
      delete ((map<const TString,pair<TString,unsigned int> >*)p);
   }
   static void deleteArray_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p) {
      delete [] ((map<const TString,pair<TString,unsigned int> >*)p);
   }
   static void destruct_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgR(void *p) {
      typedef map<const TString,pair<TString,unsigned int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<const TString,pair<TString,unsigned int> >

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

/********************************************************
* ../StandAlone/PATCoreCint.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablePATCoreCint();

extern "C" void G__set_cpp_environmentPATCoreCint() {
  G__cpp_reset_tagtablePATCoreCint();
}
#include <new>
extern "C" int G__cpp_dllrevPATCoreCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Root */

/* Root::TAccept */
static int G__PATCoreCint_419_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TAccept* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TAccept((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Root::TAccept((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TAccept[n];
       } else {
         p = new((void*) gvp) Root::TAccept[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TAccept;
       } else {
         p = new((void*) gvp) Root::TAccept;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTAccept));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TAccept* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TAccept(*(Root::TAccept*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Root::TAccept(*(Root::TAccept*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTAccept));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TAccept& obj = ((Root::TAccept*) G__getstructoffset())->operator=(*(Root::TAccept*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TAccept*) G__getstructoffset())->operator bool());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const Root::TAccept*) G__getstructoffset())->getName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TAccept*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TAccept*) G__getstructoffset())->clearPositive();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Root::TAccept*) G__getstructoffset())->getNCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Root::TAccept*) G__getstructoffset())->addCut(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Root::TAccept*) G__getstructoffset())->getCutPosition(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TAccept*) G__getstructoffset())->getCutName((unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TAccept*) G__getstructoffset())->getCutDescription(*(TString*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TAccept*) G__getstructoffset())->getCutDescription((unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TAccept*) G__getstructoffset())->getCutResult(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TAccept*) G__getstructoffset())->getCutResult((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const bitset<m_nBits>* pobj;
         const bitset<m_nBits> xobj = ((const Root::TAccept*) G__getstructoffset())->getCutResultBitSet();
         pobj = new bitset<m_nBits>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TAccept*) G__getstructoffset())->setCutResult(*(TString*) libp->para[0].ref, (bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TAccept*) G__getstructoffset())->setCutResult((unsigned int) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TAccept*) G__getstructoffset())->setCutDescription(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_419_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TAccept*) G__getstructoffset())->setCutDescription((unsigned int) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TAccept G__TRootcLcLTAccept;
static int G__PATCoreCint_419_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TAccept*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TAccept*) (soff+(sizeof(Root::TAccept)*i)))->~G__TRootcLcLTAccept();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TAccept*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TAccept*) (soff))->~G__TRootcLcLTAccept();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Root::TResult */
static int G__PATCoreCint_431_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TResult* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TResult((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Root::TResult((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TResult[n];
       } else {
         p = new((void*) gvp) Root::TResult[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TResult;
       } else {
         p = new((void*) gvp) Root::TResult;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTResult));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TResult* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TResult(*(Root::TResult*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Root::TResult(*(Root::TResult*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTResult));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TResult& obj = ((Root::TResult*) G__getstructoffset())->operator=(*(Root::TResult*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Root::TResult*) G__getstructoffset())->operator double());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pair<double,double>* pobj;
         const pair<double,double> xobj = ((const Root::TResult*) G__getstructoffset())->operator ::pair<double,double>();
         pobj = new pair<double,double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Root::TResult*) G__getstructoffset())->getEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Root::TResult*) G__getstructoffset())->getScaleFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Root::TResult*) G__getstructoffset())->getMVAResponse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Root::TResult*) G__getstructoffset())->getTotalUncertainty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const Root::TResult*) G__getstructoffset())->getName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TResult*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Root::TResult*) G__getstructoffset())->getNResults());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Root::TResult*) G__getstructoffset())->addResult(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Root::TResult*) G__getstructoffset())->getResultPosition(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TResult*) G__getstructoffset())->getResultName((unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TResult*) G__getstructoffset())->getResultDescription(*(TString*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TResult*) G__getstructoffset())->getResultDescription((unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Root::TResult*) G__getstructoffset())->getResult(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Root::TResult*) G__getstructoffset())->getResult((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double>* pobj;
         const vector<double> xobj = ((const Root::TResult*) G__getstructoffset())->getResults();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TResult*) G__getstructoffset())->setResult(*(TString*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TResult*) G__getstructoffset())->setResult((unsigned int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TResult*) G__getstructoffset())->setResultDescription(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PATCoreCint_431_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TResult*) G__getstructoffset())->setResultDescription((unsigned int) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TResult G__TRootcLcLTResult;
static int G__PATCoreCint_431_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TResult*) (soff+(sizeof(Root::TResult)*i)))->~G__TRootcLcLTResult();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TResult*) (soff))->~G__TRootcLcLTResult();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Root */

/* Root::TAccept */

/* Root::TResult */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncPATCoreCint {
 public:
  G__Sizep2memfuncPATCoreCint(): p(&G__Sizep2memfuncPATCoreCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncPATCoreCint::*p)();
};

size_t G__get_sizep2memfuncPATCoreCint()
{
  G__Sizep2memfuncPATCoreCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancePATCoreCint() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablePATCoreCint() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__PATCoreCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PATCoreCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PATCoreCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PATCoreCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PATCoreCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__PATCoreCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PATCoreCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PATCoreCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PATCoreCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PATCoreCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("bitset<m_nBits>",117,G__get_linked_tagnum(&G__PATCoreCintLN_bitsetlE32gR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const TString,std::pair<TString,unsigned int> >",117,G__get_linked_tagnum(&G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const TString,pair<TString,unsigned int> >",117,G__get_linked_tagnum(&G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const TString,pair<TString,unsigned int>,less<const TString> >",117,G__get_linked_tagnum(&G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Root */
static void G__setup_memvarRoot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PATCoreCintLN_Root));
   {
   }
   G__tag_memvar_reset();
}


   /* Root::TAccept */
static void G__setup_memvarRootcLcLTAccept(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTAccept));
   { Root::TAccept *p; p=(Root::TAccept*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,2,"m_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PATCoreCintLN_bitsetlE32gR),G__defined_typename("bitset<m_nBits>"),-1,4,"m_accept=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR),G__defined_typename("map<const TString,std::pair<TString,unsigned int> >"),-1,4,"m_cutMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PATCoreCintLN_TString),-1,-1,4,"m_emptyString=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Root::TResult */
static void G__setup_memvarRootcLcLTResult(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTResult));
   { Root::TResult *p; p=(Root::TResult*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,2,"m_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_defaultResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PATCoreCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"m_result=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR),G__defined_typename("map<const TString,std::pair<TString,unsigned int> >"),-1,4,"m_resultMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PATCoreCintLN_TString),-1,-1,4,"m_emptyString=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarPATCoreCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncRoot(void) {
   /* Root */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PATCoreCintLN_Root));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTAccept(void) {
   /* Root::TAccept */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTAccept));
   G__memfunc_setup("TAccept",676,G__PATCoreCint_419_0_1, 105, G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTAccept), -1, 0, 1, 1, 1, 0, "C - - 10 '\"TAccept\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAccept",676,G__PATCoreCint_419_0_2, 105, G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTAccept), -1, 0, 1, 1, 1, 0, "u 'Root::TAccept' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__PATCoreCint_419_0_3, 117, G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTAccept), -1, 1, 1, 1, 1, 0, "u 'Root::TAccept' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator bool",1336,G__PATCoreCint_419_0_4, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__PATCoreCint_419_0_5, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PATCoreCint_419_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearPositive",1370,G__PATCoreCint_419_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCuts",813,G__PATCoreCint_419_0_8, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCut",597,G__PATCoreCint_419_0_9, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - cutName u 'TString' - 11 - cutDescription", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutPosition",1473,G__PATCoreCint_419_0_10, 104, -1, -1, 0, 1, 1, 1, 8, "u 'TString' - 11 - cutName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutName",1005,G__PATCoreCint_419_0_11, 117, G__get_linked_tagnum(&G__PATCoreCintLN_TString), -1, 1, 1, 1, 1, 9, "h - - 0 - cutPosition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutDescription",1776,G__PATCoreCint_419_0_12, 117, G__get_linked_tagnum(&G__PATCoreCintLN_TString), -1, 1, 1, 1, 1, 9, "u 'TString' - 11 - cutName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutDescription",1776,G__PATCoreCint_419_0_13, 117, G__get_linked_tagnum(&G__PATCoreCintLN_TString), -1, 1, 1, 1, 1, 9, "h - - 0 - cutPosition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutResult",1259,G__PATCoreCint_419_0_14, 103, -1, -1, 0, 1, 1, 1, 8, "u 'TString' - 11 - cutName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutResult",1259,G__PATCoreCint_419_0_15, 103, -1, -1, 0, 1, 1, 1, 8, "h - - 0 - cutPosition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutResultBitSet",1846,G__PATCoreCint_419_0_16, 117, G__get_linked_tagnum(&G__PATCoreCintLN_bitsetlE32gR), G__defined_typename("bitset<m_nBits>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutResult",1271,G__PATCoreCint_419_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - cutName g - - 0 - cutResult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutResult",1271,G__PATCoreCint_419_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - cutPosition g - - 0 - cutResult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutDescription",1788,G__PATCoreCint_419_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - cutName u 'TString' - 11 - cutDescription", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutDescription",1788,G__PATCoreCint_419_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - cutPosition u 'TString' - 11 - cutDescription", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAccept", 802, G__PATCoreCint_419_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTResult(void) {
   /* Root::TResult */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTResult));
   G__memfunc_setup("TResult",723,G__PATCoreCint_431_0_1, 105, G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTResult), -1, 0, 1, 1, 1, 0, "C - - 10 '\"TResult\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TResult",723,G__PATCoreCint_431_0_2, 105, G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTResult), -1, 0, 1, 1, 1, 0, "u 'Root::TResult' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__PATCoreCint_431_0_3, 117, G__get_linked_tagnum(&G__PATCoreCintLN_RootcLcLTResult), -1, 1, 1, 1, 1, 0, "u 'Root::TResult' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator double",1543,G__PATCoreCint_431_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator pair<double,double>",2772,G__PATCoreCint_431_0_5, 117, G__get_linked_tagnum(&G__PATCoreCintLN_pairlEdoublecOdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__PATCoreCint_431_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScaleFactor",1415,G__PATCoreCint_431_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMVAResponse",1395,G__PATCoreCint_431_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotalUncertainty",2010,G__PATCoreCint_431_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__PATCoreCint_431_0_10, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PATCoreCint_431_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNResults",1152,G__PATCoreCint_431_0_12, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addResult",936,G__PATCoreCint_431_0_13, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - resultName u 'TString' - 11 - resultDescription", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResultPosition",1812,G__PATCoreCint_431_0_14, 104, -1, -1, 0, 1, 1, 1, 8, "u 'TString' - 11 - resultName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResultName",1344,G__PATCoreCint_431_0_15, 117, G__get_linked_tagnum(&G__PATCoreCintLN_TString), -1, 1, 1, 1, 1, 9, "h - - 0 - resultPosition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResultDescription",2115,G__PATCoreCint_431_0_16, 117, G__get_linked_tagnum(&G__PATCoreCintLN_TString), -1, 1, 1, 1, 1, 9, "u 'TString' - 11 - resultName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResultDescription",2115,G__PATCoreCint_431_0_17, 117, G__get_linked_tagnum(&G__PATCoreCintLN_TString), -1, 1, 1, 1, 1, 9, "h - - 0 - resultPosition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResult",959,G__PATCoreCint_431_0_18, 100, -1, -1, 0, 1, 1, 1, 8, "u 'TString' - 11 - resultName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResult",959,G__PATCoreCint_431_0_19, 100, -1, -1, 0, 1, 1, 1, 8, "h - - 0 - resultPosition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResults",1074,G__PATCoreCint_431_0_20, 117, G__get_linked_tagnum(&G__PATCoreCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setResult",971,G__PATCoreCint_431_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - resultName d - - 0 - resultResult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setResult",971,G__PATCoreCint_431_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - resultPosition d - - 0 - resultResult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setResultDescription",2127,G__PATCoreCint_431_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - resultName u 'TString' - 11 - resultDescription", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setResultDescription",2127,G__PATCoreCint_431_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - resultPosition u 'TString' - 11 - resultDescription", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TResult", 849, G__PATCoreCint_431_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncPATCoreCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalPATCoreCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcPATCoreCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__PATCoreCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__PATCoreCintLN_Root = { "Root" , 110 , -1 };
G__linked_taginfo G__PATCoreCintLN_RootcLcLTAccept = { "Root::TAccept" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_bitsetlE32gR = { "bitset<32>" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR = { "map<const TString,pair<TString,unsigned int>,less<const TString>,allocator<pair<const TString,pair<TString,unsigned int> > > >" , 99 , -1 };
G__linked_taginfo G__PATCoreCintLN_RootcLcLTResult = { "Root::TResult" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablePATCoreCint() {
  G__PATCoreCintLN_TString.tagnum = -1 ;
  G__PATCoreCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__PATCoreCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__PATCoreCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PATCoreCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__PATCoreCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PATCoreCintLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__PATCoreCintLN_Root.tagnum = -1 ;
  G__PATCoreCintLN_RootcLcLTAccept.tagnum = -1 ;
  G__PATCoreCintLN_bitsetlE32gR.tagnum = -1 ;
  G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__PATCoreCintLN_RootcLcLTResult.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablePATCoreCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_TString);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_pairlEdoublecOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PATCoreCintLN_Root),0,-1,0,(char*)NULL,G__setup_memvarRoot,G__setup_memfuncRoot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PATCoreCintLN_RootcLcLTAccept),sizeof(Root::TAccept),-1,265984,(char*)NULL,G__setup_memvarRootcLcLTAccept,G__setup_memfuncRootcLcLTAccept);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_bitsetlE32gR);
   G__get_linked_tagnum_fwd(&G__PATCoreCintLN_maplEconstsPTStringcOpairlETStringcOunsignedsPintgRcOlesslEconstsPTStringgRcOallocatorlEpairlEconstsPTStringcOpairlETStringcOunsignedsPintgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PATCoreCintLN_RootcLcLTResult),sizeof(Root::TResult),-1,265984,(char*)NULL,G__setup_memvarRootcLcLTResult,G__setup_memfuncRootcLcLTResult);
}
extern "C" void G__cpp_setupPATCoreCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupPATCoreCint()");
  G__set_cpp_environmentPATCoreCint();
  G__cpp_setup_tagtablePATCoreCint();

  G__cpp_setup_inheritancePATCoreCint();

  G__cpp_setup_typetablePATCoreCint();

  G__cpp_setup_memvarPATCoreCint();

  G__cpp_setup_memfuncPATCoreCint();
  G__cpp_setup_globalPATCoreCint();
  G__cpp_setup_funcPATCoreCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncPATCoreCint();
  return;
}
class G__cpp_setup_initPATCoreCint {
  public:
    G__cpp_setup_initPATCoreCint() { G__add_setup_func("PATCoreCint",(G__incsetup)(&G__cpp_setupPATCoreCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initPATCoreCint() { G__remove_setup_func("PATCoreCint"); }
};
G__cpp_setup_initPATCoreCint G__cpp_setup_initializerPATCoreCint;

